package gui;

import gui.Game;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

public class MainMenuTest {

    private static MainMenu menu;

    /**
     * Converts a JPanel from a result screen generated by createResultScreen into an array of individual labels.
     * @param detailsComponent the original panel from a result screen
     * @return ArrayList of the labels
     */
    private ArrayList<JLabel> getLabels(Component detailsComponent){
        JPanel detailsPanel = (JPanel) detailsComponent;

        Component[] details = detailsPanel.getComponents();
        ArrayList<JLabel> labels = new ArrayList<>();
        for (Component detail : details) {
            labels.add((JLabel) detail);
        }

        return labels;
    }

    /**
     * Automatically sets and gets the score label on the in-game display, helper function for testSetScoreLabel
     * @param score score to be displayed
     * @return JLabel
     */
    private JLabel setAndGetScoreLabel(int score){
        menu.setScoreLabel(score);
        return menu.getScoreLabel();
    }

    /**
     * Automatically sets and gets the reward label on the in-game display, helper function for testSetRewardLabel.
     * @param collected number of rewards collected
     * @param required number of rewards required
     * @return JLabel
     */
    private JLabel setAndGetRewardLabel(int collected, int required){
        menu.setRewardLabel(collected, required);
        return menu.getRewardLabel();
    }

    @BeforeAll
    public static void setUp() {
        menu = new MainMenu(new JFrame(""), "", new Game());
    }

    @Test
    @DisplayName("Ensure method 'setScoreLabel' correctly sets the score and gives it a color based on if it is positive or negative.")
    public void testSetScoreLabel(){
        menu.createGameDisplay();

        JLabel scoreLabel = setAndGetScoreLabel(28);
        assertEquals("Score: 28", scoreLabel.getText());
        assertEquals(new Color(214, 92, 211), scoreLabel.getForeground());

        scoreLabel = setAndGetScoreLabel(0);
        assertEquals("Score: 0", scoreLabel.getText());
        assertEquals(new Color(214, 92, 211), scoreLabel.getForeground());

        scoreLabel = setAndGetScoreLabel(-1);
        assertEquals("Score: -1", scoreLabel.getText());
        assertEquals(new Color(240, 80, 49), scoreLabel.getForeground());
    }

    @Test
    @DisplayName("Check conversion of a time in milliseconds to a string and proper display on the screen.")
    public void testSetTimeLabel(){
        menu.createGameDisplay();

        JLabel timeLabel;

        int[] times = {-1, 0, 1, 11, 111, 1000, 10000, 60000, 600000};
        String[] expectedResults = {
        "00:00.000", "00:00.000", "00:00.001", "00:00.011", "00:00.111", "00:01.000", "00:10.000", "01:00.000", "10:00.000",
        };

        for (int i=0;i<times.length;i++){
            menu.setTimeLabel(times[i]);
            timeLabel = menu.getTimeLabel();
            assertEquals("Time: "+expectedResults[i], timeLabel.getText());
        }

    }

    @Test
    @DisplayName("Ensure method 'setRewardLabel' correctly sets the text and color for the rewards collected")
    public void testSetRewardLabel(){
        menu.createGameDisplay();

        //testing values out of bounds
        JLabel rewardLabel = setAndGetRewardLabel(-1, 0);
        assertEquals("Rewards: 0 / 1", rewardLabel.getText());

        rewardLabel = setAndGetRewardLabel(0, 0);
        assertEquals("Rewards: 0 / 1", rewardLabel.getText());

        rewardLabel = setAndGetRewardLabel(-1, 1);
        assertEquals("Rewards: 0 / 1", rewardLabel.getText());

        rewardLabel = setAndGetRewardLabel(0, 1);
        assertEquals("Rewards: 0 / 1", rewardLabel.getText());

        //testing color changes
        rewardLabel = setAndGetRewardLabel(0, 34);
        assertEquals("Rewards: 0 / 34", rewardLabel.getText());
        assertEquals(new Color(255, 0, 0), rewardLabel.getForeground());

        rewardLabel = setAndGetRewardLabel(16, 34);//off point for (rewardFraction < 0.5)
        assertEquals("Rewards: 16 / 34", rewardLabel.getText());
        assertEquals(new Color(255, 240, 0), rewardLabel.getForeground());

        rewardLabel = setAndGetRewardLabel(17, 34);//on point for (rewardFraction < 0.5)
        assertEquals("Rewards: 17 / 34", rewardLabel.getText());
        assertEquals(new Color(255, 255, 0), rewardLabel.getForeground());

        rewardLabel = setAndGetRewardLabel(34, 34);
        assertEquals("Rewards: 34 / 34", rewardLabel.getText());
        assertEquals(new Color(0, 255, 0), rewardLabel.getForeground());

        rewardLabel = setAndGetRewardLabel(35, 34);
        assertEquals("Rewards: 34 / 34", rewardLabel.getText());
        assertEquals(new Color(0, 255, 0), rewardLabel.getForeground());
    }

    @Test
    @DisplayName("Ensure method 'createResultScreen' displays a correct result screen based on various game states.")
    public void testResultScreen(){
        menu.createGameDisplay();

        //these are the lines in the description labels that should be blank
        int[] state1BlankLines = {1, 2, 3, 5, 6, 7, 8};
        int[] state2BlankLines = {1, 2, 5, 6, 7, 8};
        int[] state3BlankLines = {1, 2, 6, 8};
        int[] defaultRewardValues = {0, 1};

        //error case where the state is not a win or a loss.
        Game.score = 0;
        JPanel resultScreen = menu.createResultScreen(1, 0, 0, defaultRewardValues, defaultRewardValues);
        assertEquals(2, resultScreen.getComponentCount());

        Component resultComponent = resultScreen.getComponent(0);
        JLabel resultLabel = (JLabel) resultComponent;
        assertEquals("GAME RETURNED STATE 1.", resultLabel.getText());

        Component detailsComponent = resultScreen.getComponent(1);
        ArrayList<JLabel> labels = getLabels(detailsComponent);
        assertEquals(9, labels.size());

        assertEquals("Something went wrong.",labels.get(0).getText());
        for (int i=0;i<state1BlankLines.length;i++){
            assertEquals("",labels.get(state1BlankLines[i]).getText());
        }

        //losing case where the fly was caught by the spider
        resultScreen = menu.createResultScreen(2, 0, 0, defaultRewardValues, defaultRewardValues);
        assertEquals(2, resultScreen.getComponentCount());

        resultComponent = resultScreen.getComponent(0);
        resultLabel = (JLabel) resultComponent;
        assertEquals("YOU LOSE!", resultLabel.getText());

        detailsComponent = resultScreen.getComponent(1);
        labels = getLabels(detailsComponent);
        assertEquals(9, labels.size());

        assertEquals("The spider caught you!",labels.get(0).getText());
        assertEquals("Score: 0", labels.get(3).getText());
        assertEquals("Rewards Collected: 0 / 1", labels.get(4).getText());

        //losing case where the score is negative
        Game.score = -159378576;
        resultScreen = menu.createResultScreen(2, 0, 0, defaultRewardValues, defaultRewardValues);
        assertEquals(2, resultScreen.getComponentCount());

        detailsComponent = resultScreen.getComponent(1);
        labels = getLabels(detailsComponent);
        assertEquals(9, labels.size());

        assertEquals("Your score dropped below 0!",labels.get(0).getText());
        assertEquals("Score: -159378576", labels.get(3).getText());
        for (int i=0;i<state2BlankLines.length;i++){
            assertEquals("",labels.get(state2BlankLines[i]).getText());
        }

        //winning case where there is not a new high score
        Game.score = 500;
        resultScreen = menu.createResultScreen(3, 500, 0, defaultRewardValues, defaultRewardValues);
        assertEquals(2, resultScreen.getComponentCount());

        resultComponent = resultScreen.getComponent(0);
        resultLabel = (JLabel) resultComponent;
        assertEquals("YOU WIN!", resultLabel.getText());

        detailsComponent = resultScreen.getComponent(1);
        labels = getLabels(detailsComponent);
        assertEquals(9, labels.size());

        assertEquals("Score: 500", labels.get(3).getText());
        assertEquals("Bonus Rewards Collected: 0 / 1", labels.get(4).getText());
        assertEquals("High Score: 500", labels.get(7).getText());
        for (int i=0;i<state3BlankLines.length;i++){
            assertEquals("",labels.get(state3BlankLines[i]).getText());
        }

        //test the winning case where there is a new high score
        Game.score = 501;
        resultScreen = menu.createResultScreen(3, 500, 0, defaultRewardValues, defaultRewardValues);
        assertEquals(2, resultScreen.getComponentCount());

        detailsComponent = resultScreen.getComponent(1);
        labels = getLabels(detailsComponent);

        assertEquals("Score: 501", labels.get(3).getText());
        assertEquals("Bonus Rewards Collected: 0 / 1", labels.get(4).getText());
        assertEquals("NEW HIGH SCORE!", labels.get(7).getText());
        for (int i=0;i<state3BlankLines.length;i++){
            assertEquals("",labels.get(state3BlankLines[i]).getText());
        }

    }
}
